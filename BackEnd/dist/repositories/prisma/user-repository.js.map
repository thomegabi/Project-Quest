{"version":3,"file":"user-repository.js","sourceRoot":"","sources":["../../../src/repositories/prisma/user-repository.ts"],"names":[],"mappings":";;;AAAA,2CAAoD;AAEpD,MAAM,MAAM,GAAG,IAAI,qBAAY,CAAC;IAC9B,GAAG,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;CACxC,CAAC,CAAC;AAEH,MAAa,cAAc;IACzB,KAAK,CAAC,UAAU,CAAC,KAAa,EAAE,QAAgB,EAAE,IAAY;QAC5D,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,IAAI,EAAE;gBACJ,IAAI;gBACJ,KAAK;gBACL,QAAQ;aACT;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAAU;QAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAC5B,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,KAAa;QAChC,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAC5B,KAAK,EAAE,EAAE,KAAK,EAAE;SACjB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,IAAmB;QAC9C,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,KAAK,EAAE,EAAE,EAAE,EAAE;YACb,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU;QACzB,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;CACF;AAvCD,wCAuCC","sourcesContent":["import { PrismaClient, User } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient({\r\n  log: ['query', 'info', 'warn', 'error'],\r\n});\r\n\r\nexport class UserRepository {\r\n  async createUser(email: string, password: string, name: string): Promise<User> {\r\n    return prisma.user.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        password\r\n      },\r\n    });\r\n  }\r\n\r\n  async getUserById(id: string): Promise<User | null> {\r\n    return prisma.user.findUnique({\r\n      where: { id },\r\n    });\r\n  }\r\n\r\n  async getUserByEmail(email: string): Promise<User | null> {\r\n    return prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n  }\r\n\r\n  async updateUser(id: string, data: Partial<User>): Promise<User> {\r\n    return prisma.user.update({\r\n      where: { id },\r\n      data,\r\n    });\r\n  }\r\n\r\n  async deleteUser(id: string): Promise<User> {\r\n    return prisma.user.delete({\r\n      where: { id },\r\n    });\r\n  }\r\n\r\n  async getAllUsers(): Promise<User[]> {\r\n    return prisma.user.findMany();\r\n  }\r\n}\r\n"]}