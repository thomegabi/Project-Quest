{"version":3,"file":"user-controller.js","sourceRoot":"","sources":["../../src/controllers/user-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import e, { Request, Response, NextFunction } from 'express';\r\nimport { validationResult } from 'express-validator'; \r\nimport { UserRepository } from '../repositories/prisma/user-repository';\r\nimport { UserService } from '../services/user-services';\r\nimport path from 'path';\r\nimport jwt from 'jsonwebtoken'\r\nimport 'dotenv/config'\r\nimport bcrypt from 'bcrypt'\r\n\r\nconst userService = new UserService();\r\n\r\nexport const getUsers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    const users = await userService.getAllUsers();\r\n    res.status(200).json({ users });\r\n  } catch (error) {\r\n    console.log(\"Erro ao localizar usuários: \", error);\r\n    next(error); \r\n  }\r\n};\r\n\r\n\r\nexport const login = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const identifiedUser = await userService.getUserByEmail(email);\r\n    console.log(identifiedUser)\r\n\r\n    if (!identifiedUser) {\r\n      res.status(500).json({message: 'User unidentified'})\r\n      return\r\n    }\r\n\r\n    /*const isPasswordValid = await bcrypt.compare(password, identifiedUser.password);\r\n    console.log(isPasswordValid)\r\n      if (!isPasswordValid) {\r\n        throw new HttpError(\"Usuário não encontrado, verifique sua senha e email!\", 401);\r\n      }*/\r\n\r\n\r\n    const token = jwt.sign({ userId: identifiedUser.id }, process.env.JWT_SECRET as string, {\r\n      expiresIn: '3h', \r\n    });\r\n\r\n    res.status(200).json({token});\r\n  } catch (error) {\r\n    console.log(\"Error: \", error)\r\n    res.status(404).json({error});\r\n  }\r\n};\r\n\r\nexport const signup = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  console.log(\"Signing up... \");\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    console.log(\"ERROR: \", errors.array());\r\n    res.status(422).json({message: 'Erro: ', errors});\r\n  }\r\n\r\n  const { email, password, name} = req.body;\r\n\r\n  try {\r\n    const existingUser = await userService.getUserByEmail(email);\r\n    if (existingUser) {\r\n      res.status(422).json({message: 'Email already in use'});\r\n      return \r\n    }\r\n\r\n   /* const saltRounds = 10\r\n\r\n    const hashPassword = async (password: any) => {\r\n      const hash = await bcrypt.hash(password, saltRounds);\r\n      return hash;\r\n    };\r\n    \r\n    const hashedPassword = await hashPassword(password);\r\n    console.log(hashedPassword); */\r\n\r\n    const createdUser = await userService.createUser(email, password, name);\r\n    \r\n    const token = jwt.sign({ userId: createdUser.id }, process.env.JWT_SECRET as string, {\r\n      expiresIn: '3h', \r\n    });\r\n\r\n    console.log(`Email: ${email}, Password: ${password}, Nome: ${name}`);\r\n    \r\n    res.status(201).json({ token });\r\n  } catch (error) {\r\n    console.log('Error: ', error);\r\n    next(error)\r\n    res.status(500).json({message: 'Error: ', error});\r\n  }\r\n};\r\n\r\nexport const getUserWithToken = async(req: Request, res: Response, next: NextFunction): Promise<Response | any> => {\r\n  const userId = req.userId;\r\n\r\n  if(!userId){\r\n    return res.status(404).json('Usuário não encontrado')\r\n    return\r\n  }\r\n\r\n  try{\r\n    const identifiedUser = await userService.getUserById(userId)\r\n\r\n    if(!identifiedUser){\r\n      res.status(404).json('Usuário não localizado')\r\n      return \r\n    }\r\n  \r\n    res.status(200).json({identifiedUser})\r\n  } catch(err){\r\n    next(err)\r\n    res.status(500).json(err)\r\n  }\r\n}\r\n\r\nexport const deleteUser = async(req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  try{\r\n    const { userId } = req.params\r\n\r\n    const deletedUser = await userService.deleteUser(userId)\r\n\r\n    if(!deletedUser){\r\n      res.status(404).json({message: \"Usuário não encontrado\"})\r\n      return\r\n    }\r\n\r\n    res.status(200).json({message: \"Usuário deletado com sucesso: \", deletedUser})\r\n  } catch (error){\r\n    console.log(\"Erro ao deletar usuário: \", error)\r\n    next(error)\r\n    res.status(500).json({message: \"Um erro inesperado ocorreu: \", error})\r\n    return\r\n  }\r\n}\r\n"]}